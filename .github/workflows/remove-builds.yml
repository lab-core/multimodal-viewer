name: Remove builds

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags to ensure we can push changes
          ref: ${{ github.head_ref }} # Checkout the current branch to ensure we are on the correct commit
          token: ${{ secrets.WORKFLOW_PAT }} # Use the personal access token for authentication

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Remove previous build commits
        env:
          GIT_SEQUENCE_EDITOR: 'python3 /tmp/edit_rebase_sequence.py' # Set the editor to a Python script that will edit the rebase sequence
        run: |
          # Create a temporary Python script to edit the rebase sequence
          cat << 'EOF' > /tmp/edit_rebase_sequence.py
          import sys
          import re

          sequence_file = sys.argv[1]
          print(f"Editing sequence file: {sequence_file}")
          with open(sequence_file, 'r') as file:
              lines = file.readlines()

          with open(sequence_file, 'w') as file:
              for line in lines:
                  if not re.match(r'^pick [0-9a-f]+ _____automatic-build-update_____', line):
                      file.write(line)
          EOF

          # Compute the number of commits to rebase
          commit_count=$(git rev-list --count HEAD)

          # Substract one
          rebase_range=$((commit_count - 1))

          # Start the interactive rebase
          git rebase -i HEAD~$rebase_range

          # Push the changes to the current branch
          # The --force flag is needed because of the rebase
          git push --force
